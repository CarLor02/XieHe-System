version: '3.8'

services:
  # MySQL 数据库
  mysql:
    image: mysql:8.0
    container_name: medical_mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: root_password_2024
      MYSQL_DATABASE: medical_system
      MYSQL_USER: medical_user
      MYSQL_PASSWORD: medical_password_2024
      MYSQL_CHARACTER_SET_SERVER: utf8mb4
      MYSQL_COLLATION_SERVER: utf8mb4_unicode_ci
    ports:
      - '3307:3306'
    volumes:
      - mysql_data:/var/lib/mysql
      - mysql_logs:/var/log/mysql
      - ./docker/mysql/my.cnf:/etc/mysql/conf.d/my.cnf:ro
      - ./docker/mysql/init:/docker-entrypoint-initdb.d:ro
    command: --default-authentication-plugin=mysql_native_password
    networks:
      - medical_network
    healthcheck:
      test:
        [
          'CMD',
          'mysqladmin',
          'ping',
          '-h',
          'localhost',
          '-u',
          'root',
          '-proot_password_2024',
        ]
      timeout: 20s
      retries: 10

  # Redis 缓存
  redis:
    image: redis:7-alpine
    container_name: medical_redis
    restart: unless-stopped
    ports:
      - '6380:6379'
    volumes:
      - redis_data:/data
      - redis_logs:/var/log/redis
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - medical_network
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      timeout: 10s
      retries: 5

  # 后端 API 服务
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: medical_backend
    restart: unless-stopped
    environment:
      - PYTHONPATH=/app
      - ENVIRONMENT=production
      - DATABASE_URL=mysql://medical_user:medical_password_2024@mysql:3306/medical_system
      - REDIS_URL=redis://redis:6379/0
      - JWT_SECRET_KEY=dev_jwt_secret_key_2024
      - CORS_ORIGINS=http://localhost:3000,http://127.0.0.1:3000
    ports:
      - '8000:8000'
    volumes:
      - uploads_data:/app/uploads
      - models_data:/app/models
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - medical_network
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:8000/health']
      timeout: 10s
      retries: 5

  # 前端应用
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: medical_frontend
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NEXT_PUBLIC_WS_URL=ws://localhost:8000
    ports:
      - '3000:80'
    depends_on:
      - backend
    networks:
      - medical_network
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3000/api/health']
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx 反向代理
  nginx:
    image: nginx:1.24-alpine
    container_name: medical_nginx
    restart: unless-stopped
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
      - uploads_data:/var/www/media:ro
    depends_on:
      - frontend
      - backend
    networks:
      - medical_network
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost/nginx-health']
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  mysql_data:
    driver: local
  mysql_logs:
    driver: local
  redis_data:
    driver: local
  redis_logs:
    driver: local
  nginx_logs:
    driver: local
  uploads_data:
    driver: local
  models_data:
    driver: local

networks:
  medical_network:
    driver: bridge

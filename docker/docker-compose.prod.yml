version: '3.8'

services:
  # 前端服务 - 生产环境
  frontend:
    build:
      context: ../frontend
      dockerfile: Dockerfile
      target: production
    container_name: medical_frontend_prod
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=https://api.medical-system.com
      - NEXT_PUBLIC_WS_URL=wss://api.medical-system.com
    expose:
      - "3000"
    volumes:
      - frontend_static:/app/.next/static
    depends_on:
      - backend
    networks:
      - medical_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # 后端服务 - 生产环境
  backend:
    build:
      context: ../backend
      dockerfile: Dockerfile
      target: production
    container_name: medical_backend_prod
    restart: unless-stopped
    environment:
      - PYTHONPATH=/app
      - ENVIRONMENT=production
      - DATABASE_URL=mysql://medical_user:${MYSQL_PASSWORD}@mysql:3306/medical_system
      - REDIS_URL=redis://redis:6379/0
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - CORS_ORIGINS=https://medical-system.com,https://www.medical-system.com
      - SENTRY_DSN=${SENTRY_DSN}
    expose:
      - "8000"
    volumes:
      - uploads_data:/app/uploads
      - models_data:/app/models
      - backend_logs:/app/logs
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - medical_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  # MySQL数据库 - 生产环境
  mysql:
    image: mysql:8.0
    container_name: medical_mysql_prod
    restart: unless-stopped
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=medical_system
      - MYSQL_USER=medical_user
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_CHARACTER_SET_SERVER=utf8mb4
      - MYSQL_COLLATION_SERVER=utf8mb4_unicode_ci
    expose:
      - "3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - mysql_logs:/var/log/mysql
      - ./mysql/my.cnf:/etc/mysql/conf.d/my.cnf:ro
      - ./mysql/init:/docker-entrypoint-initdb.d:ro
      - mysql_backups:/backups
    command: --default-authentication-plugin=mysql_native_password
    networks:
      - medical_network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${MYSQL_ROOT_PASSWORD}"]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  # Redis缓存 - 生产环境
  redis:
    image: redis:7-alpine
    container_name: medical_redis_prod
    restart: unless-stopped
    expose:
      - "6379"
    volumes:
      - redis_data:/data
      - redis_logs:/var/log/redis
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf --requirepass ${REDIS_PASSWORD}
    networks:
      - medical_network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Nginx反向代理 - 生产环境
  nginx:
    image: nginx:1.24-alpine
    container_name: medical_nginx_prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
      - uploads_data:/var/www/media:ro
      - frontend_static:/var/www/static:ro
    depends_on:
      - frontend
      - backend
    networks:
      - medical_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/nginx-health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'

  # 监控服务 - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: medical_prometheus
    restart: unless-stopped
    expose:
      - "9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/prometheus/rules:/etc/prometheus/rules:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    networks:
      - medical_network
      - monitoring_network

  # 监控服务 - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: medical_grafana
    restart: unless-stopped
    expose:
      - "3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - ./monitoring/grafana/grafana.ini:/etc/grafana/grafana.ini:ro
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - monitoring_network

  # 日志收集 - Filebeat
  filebeat:
    image: docker.elastic.co/beats/filebeat:8.8.0
    container_name: medical_filebeat
    restart: unless-stopped
    user: root
    volumes:
      - ./monitoring/filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - nginx_logs:/var/log/nginx:ro
      - mysql_logs:/var/log/mysql:ro
      - backend_logs:/var/log/backend:ro
    networks:
      - medical_network

volumes:
  mysql_data:
    driver: local
  mysql_logs:
    driver: local
  mysql_backups:
    driver: local
  redis_data:
    driver: local
  redis_logs:
    driver: local
  nginx_logs:
    driver: local
  uploads_data:
    driver: local
  models_data:
    driver: local
  frontend_static:
    driver: local
  backend_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  medical_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
  monitoring_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16

1. 文档规范

文档命名规则

格式：[序号]_[功能描述]_[日期]_[时间].md

示例：001_API设计_20250924_1030.md

文档存放目录

/docs/requirements/ → 需求文档

/docs/design/ → 架构设计、ER 图、接口说明

/docs/api/ → 接口文档（自动生成 + 手工补充）

/docs/meeting/ → 会议纪要

/docs/tests/ → 测试用例、测试报告

文档内容规范

必须包含以下字段：

标题：一句话说明

编写人

日期

版本

变更记录

正文（分节清晰：需求/设计/实现/注意事项）

2. 命名规范

Python 后端（FastAPI）

变量名：snake_case → patient_id, upload_file

函数名：snake_case → get_patient_info()

类名：PascalCase → PatientModel, UserService

文件名：snake_case.py → user_service.py

路由文件：按模块命名 → patients_router.py, models_router.py

数据库（MySQL）

库名：全小写 + 下划线 → xiehe_system

表名：全小写 + 下划线 → patients, patient_records

字段名：全小写 + 下划线 → patient_id, created_at

主键：id（自增 int 或 UUID）

外键：xxx_id（如 user_id）

前端（Next.js + TypeScript）

组件名：PascalCase.tsx → PatientCard.tsx

Hooks：useCamelCase.ts → useAuth.ts

全局变量：ALL_CAPS → API_BASE_URL

样式文件：与组件同名 → PatientCard.module.css

3. 代码规范

Python (PEP8 + FastAPI)

每行 ≤ 100 字符

import 顺序：标准库 → 第三方 → 本地模块

类型注解必须写：

def get_patient(patient_id: int) -> PatientSchema:
    ...


API 响应结构统一：

{
  "code": 200,
  "message": "success",
  "data": {}
}


TypeScript (Next.js 前端)

使用 ESLint + Prettier 自动格式化

必须有类型定义，禁止 any

React 组件必须写 Props 接口

接口请求封装在 /services/api.ts

4. 接口规范（FastAPI）

路由路径命名：

统一用复数：

/api/v1/users/

/api/v1/patients/

操作遵循 RESTful：

GET /api/v1/patients → 获取患者列表

POST /api/v1/patients → 新增患者

GET /api/v1/patients/{id} → 获取单个患者

PUT /api/v1/patients/{id} → 更新患者

DELETE /api/v1/patients/{id} → 删除患者

版本控制

所有接口加版本号：/api/v1/...

错误码规范

200 → 成功

400 → 参数错误

401 → 未认证

403 → 无权限

404 → 资源不存在

500 → 服务器错误

5. 数据库规范

必须有以下标准字段：

id（主键，自增或 UUID）

created_at（创建时间）

updated_at（更新时间）

is_deleted（逻辑删除，tinyint(1)）

外键字段必须建立索引，例如：

CREATE INDEX idx_patient_id ON patient_records(patient_id);


表关系说明要有 ER 图存档 /docs/design/er_diagram.md

6. 日志与测试规范

日志

Python 使用 logging，按模块分 logger

日志分级：DEBUG / INFO / WARNING / ERROR / CRITICAL

测试

单元测试目录：/tests/unit/

集成测试目录：/tests/integration/

测试文件命名：test_xxx.py

FastAPI 用 pytest + httpx 测试 API

7. Git 提交规范

格式：<type>(<scope>): <description>

示例：

feat(patient): 新增患者详情接口

fix(auth): 修复登录 JWT 过期问题

docs(api): 补充患者接口文档

8.  每次任务开始的时候复习项目编码与文档规范，任务完成后更新项目进度文档

9. . 数据库已经配置好。Host: 127.0.0.1
Port: 3306
User: root
Password: 123456   

redis 也配置好了。$ docker exec -it 2ede8f739d1a redis-cli
127.0.0.1:6379> ping
PONG
127.0.0.1:6379>   